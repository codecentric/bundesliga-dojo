buildscript {
  ext {
    springBootVersion = '1.3.1.RELEASE'
    gradleDockerVersion = '1.2'
    gradleGruntVersion = '0.6'
    gradleNodeVersion = '0.8'
  }
  repositories {
    mavenCentral()
    jcenter()
  }
  dependencies {
    classpath "com.moowork.gradle:gradle-grunt-plugin:${gradleGruntVersion}"
    classpath "com.moowork.gradle:gradle-node-plugin:${gradleNodeVersion}"
    classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
    classpath "se.transmode.gradle:gradle-docker:${gradleDockerVersion}"
  }
}

apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'java'
apply plugin: 'spring-boot'
apply plugin: 'docker'
apply plugin: 'com.moowork.grunt'
apply plugin: 'com.moowork.node'

sourceCompatibility = 1.8
targetCompatibility = 1.8

task wrapper(type: Wrapper) {
  gradleVersion = '2.10'
  distributionUrl = "https://services.gradle.org/distributions/gradle-$gradleVersion-all.zip"
}

group 'de.codecentric'

jar {
  name 'bundesliga-dojo'
  version '1.0-SNAPSHOT'
}

eclipse {
  classpath {
    containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
    containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
  }
}

repositories {
  mavenCentral()
}

dependencies {
  compile('org.springframework.boot:spring-boot-starter-data-jpa')
  compile('org.springframework.boot:spring-boot-starter-hateoas')
  compile('org.springframework.boot:spring-boot-starter-security')
  compile('org.springframework.boot:spring-boot-starter-actuator')
  compile('org.slf4j:slf4j-api:1.7.13')
  compile('org.springframework.boot:spring-boot-devtools')
  compile('com.h2database:h2:1.4.190')

  testCompile('org.springframework.boot:spring-boot-starter-test')
  testCompile('de.bechte.junit:junit-hierarchicalcontextrunner:4.12.1')
}

node {
  // Version of node to use.
  version = '5.4.1'
  // Enabled the automatic download. False is the default. This always downloads a local node env into the workspace!
  download = true
  // define a local workdir, where the downloaded Node.JS is put into.
  workDir = file("${project.buildDir}/nodejs")
}

grunt_build.dependsOn(npm_cache_clean)
grunt_build.dependsOn 'npmInstall'
grunt_build.dependsOn 'installGrunt'

jar.dependsOn(grunt_build)

task buildDocker(type: Docker, dependsOn: grunt_build) {
  push = false
  applicationName = jar.baseName
  stageDir = file("${projectDir}/docker-images/bundesliga-app/docker-dir")
  dockerfile = file("${stageDir}/Dockerfile")
  doFirst {
    copy {
      from jar
      into stageDir
    }
  }
}